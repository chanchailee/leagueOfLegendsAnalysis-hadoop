/*author: Chanchai Lee*/
package map;

/*This class is used to map only data that we need from riftwalk.jsons*/
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;


public class MapData {

	public static void main(String[] args) throws Exception {

		Configuration c = new Configuration();
		String[] files = new GenericOptionsParser(c, args).getRemainingArgs();
		/* path for input file */
		Path input = new Path(files[0]);
		/* output directory for job1 */
		Path output = new Path(files[1]);

		Job job1 = new Job(c, "Map Date");
		/* Specific main class in side jar file */
		job1.setJarByClass(MapData.class);
		/* Specific name for mapper class */
		job1.setMapperClass(Mapper1.class);

		/* Modify number of reducers */
		int numReducers = 20;
		job1.setNumReduceTasks(numReducers);

		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job1, input);
		FileOutputFormat.setOutputPath(job1, output);

		System.exit(job1.waitForCompletion(true) ? 0 : 1);

	}
	
	
	public static class Mapper1 extends Mapper<LongWritable, Text, Text, Text> {

		Text k2 = new Text();
		Text v2 = new Text();
		JSONObject o = new JSONObject();
		JSONObject e = new JSONObject();
		String out = null;
		int game_id = -1;
		int mmr = -1;
		int winner = -1;
		int casterUnitID = -1;
		String result = null;
		String match_result = null;
		

		public void map(LongWritable key, Text value, Context con) throws IOException, InterruptedException {

			/* Read input */
			String input = value.toString();
			/* Create JSON obejct from input */
			JSONObject obj = new JSONObject(input);

			/* Store game_id */
			game_id = obj.getInt("game_id");
			/* Store mmr */
			mmr = obj.getInt("mmr");
			/* Store winner team */
			winner = obj.getInt("winner");
			/* Create object to store teamID and localID of all players */
			JSONArray players = obj.getJSONArray("players");

			HashMap<Integer, String> playerlists = new HashMap<Integer, String>();
			for (int i = 0; i < players.length(); i++) {

				result = null;
				o = players.getJSONObject(i);

				if (o.getInt("teamID") == winner) {
					result = "won";

				} else {
					result = "lost";

				}

				playerlists.put(o.getInt("localID"), result);
			}

			JSONObject nest = obj.getJSONObject("data");
		}
	
	
	
	}
		

}
