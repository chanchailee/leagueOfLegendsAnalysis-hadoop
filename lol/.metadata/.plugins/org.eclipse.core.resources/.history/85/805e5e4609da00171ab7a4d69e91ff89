/*
 * author: Chanchai Lee
 * */
package bigdata.lol;

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import org.json.JSONArray;
import org.json.JSONObject;


public class MMRGameCount {
	public static void main(String[] args) throws Exception {

		Configuration c = new Configuration();
		String[] files = new GenericOptionsParser(c, args).getRemainingArgs();
		/* path for input file */
		Path input = new Path(files[0]);
		/* output directory for job1 */
		Path output = new Path(files[1]);
	
		Job job1 = new Job(c, "MMR GAME COUNT");
		/* Specific main class in side jar file */
		job1.setJarByClass(MMRGameCount.class);
		/* Specific name for mapper class */
		job1.setMapperClass(MGCMapper.class);
		/* Specific name for reducer class */
		job1.setReducerClass(MGCReducer.class);

		/* Modify number of reducers */
//		int numReducers = 0;
//		job1.setNumReduceTasks(numReducers);

		// job1.setNumReduceTasks(0);
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job1, input);
		FileOutputFormat.setOutputPath(job1, output);

		System.exit(job1.waitForCompletion(true) ? 0 : 1);

	}

	public static class MGEEMapper extends Mapper<LongWritable, Text, Text, Text> {

		Text k2 = new Text();
		Text v2 = new Text();
		int game_id = 0;
		int winner_teamID =0;
		int player_teamID = 0;
		int win_result =0;
		int interval =0;
		JSONArray players = new JSONArray();
		JSONObject o = new JSONObject();
		JSONObject ge = new JSONObject();
		
		public void map(LongWritable key, Text value, Context con) throws IOException, InterruptedException {

			/* Create objectMapper to store JSON object */
			
			String input = value.toString();
			JSONObject obj = new JSONObject(input);

			game_id = obj.getInt("game_id");
			winner_teamID = obj.getInt("winner");
			players = obj.getJSONArray("players");
			
			
			HashMap <Integer,String> playerlists = new HashMap <Integer,String> ();
			
			for (int i = 0; i < players.length(); i++) {
				win_result = 0;
				o = players.getJSONObject(i);
				player_teamID = o.getInt("teamID");
				if(winner_teamID==player_teamID){
					win_result = 1;
				}
				playerlists.put(o.getInt("localID"), o.getInt("championID")+","+win_result);
			}

			JSONObject nest = obj.getJSONObject("data");
			JSONArray goldEarnedEvents = nest.getJSONArray("goldEarnedEvents");
			double earned_time = 0;
			int unitID = -1;
			double goldEarned = 0;
			String championIDandResult = null;
			

			for (int i = 0; i < goldEarnedEvents.length(); i++) {
				championIDandResult = null;
				interval = 0;
				

				ge = goldEarnedEvents.getJSONObject(i);
				earned_time = ge.getDouble("time");
				if(earned_time<=300){
					interval = 5;
				}
				else if(earned_time>300&&earned_time<=600){
					interval = 10;
				}
				
				else if(earned_time>600&&earned_time<=900){
					interval = 15;
				}
				
				else{
					interval = 0;
				}
				
				
				unitID = ge.getInt("unitID");
				goldEarned = ge.getDouble("goldEarned");

				for (Map.Entry<Integer,String> m: playerlists.entrySet()){
					if(m.getKey()==unitID){
						championIDandResult = m.getValue();
					}
					
				}

				if (championIDandResult != null && interval !=0) {
					 k2.set(game_id + ","+championIDandResult +","+interval+",");

					
					v2.set(Double.toString(goldEarned));
					/* write the first mapreduce output */

					con.write(k2, v2);
				}

			}
		}

	}
	
}
