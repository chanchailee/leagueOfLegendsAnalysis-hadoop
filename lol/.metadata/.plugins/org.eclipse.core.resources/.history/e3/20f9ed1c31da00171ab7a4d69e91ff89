/*
 * Author: Chanchai Lee
 * */
package bigdata.lol;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;


public class Ward {

	
	public static void main(String[] args) throws Exception {

		Configuration c = new Configuration();
		String[] files = new GenericOptionsParser(c, args).getRemainingArgs();
		/* path for input file */
		Path input = new Path(files[0]);
		/* output directory for job1 */
		Path output = new Path(files[1]);


		Job job1 = new Job(c, "Map WardFrame");
		/* Specific main class in side jar file */
		job1.setJarByClass(Ward.class);
		/* Specific name for mapper class */
		job1.setMapperClass(WMapper.class);
		/* Specific name for reducer class */
		job1.setReducerClass(WReducer.class);

		/* Modify number of reducers */
		int numReducers = 20;
		job1.setNumReduceTasks(numReducers);

		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job1, input);
		FileOutputFormat.setOutputPath(job1, output);

		System.exit(job1.waitForCompletion(true) ? 0 : 1);

	}
	
	
	/*
	 * Note:
	 * 
	 * If MMR < 2000 , low
	 * If MMR >= 2000, high
	 * 
	 * Early game: Sub 15 minutes. (<= 900 second)
	 * Mid game: Between 15-35 minutes.  (>900 && <= 2100 second) 
	 * Late game: 35+ minutes. (>2100 second)
	 * */
	
	
	/*
	 * Desire output from mapper
	 * keys: game_id, mmr , team_id, 
	 * values: startTime (early,mid,late),x,y,won or lost (compare CasterUnitID with localID of winner)
	 * 
	 * */
	
	public static class WMapper extends Mapper<LongWritable, Text, Text, Text> {

		Text k2 = new Text();
		Text v2 = new Text();
		JSONObject o = new JSONObject();
		int game_id = -1;
		int mmr = -1;
		int winner = -1;
		int teamID=-1;
		JSONObject e = new JSONObject();
		double startTime = -1;
		int casterUnitID = -1;
		String match_result = null;
		int x = -1;
		int y = -1;
		
		
		
		public void map(LongWritable key, Text value, Context con) throws IOException, InterruptedException {
			/*Read input*/
			String input = value.toString();
			/*Create JSON obejct from input*/
			JSONObject obj = new JSONObject(input);
			
			/*Store game_id*/
			game_id = obj.getInt("game_id");
			/*Store mmr*/
			mmr = obj.getInt("mmr");
			/*Store winner team*/
			winner = obj.getInt("winner");
			/*Create object to store teamID and localID of all players*/
			JSONArray players = obj.getJSONArray("players");
			
			HashMap <Integer,Integer> playerlists = new HashMap <Integer,Integer> ();
			for (int i = 0; i < players.length(); i++) {
				o = players.getJSONObject(i);
				playerlists.put(o.getInt("teamID"), o.getInt("localID"));
			}

			JSONObject nest = obj.getJSONObject("data");
			JSONArray wardFrames = nest.getJSONArray("wardFrames");
			

			for (int i = 0; i < wardFrames.length(); i++) {
				championID_receiver = -1;
				championID_dealer = -1;

				
				e = damageEvents.getJSONObject(i);
				damage_time = e.getDouble("time");
				receiverUnitID = e.getInt("receiverUnitID");
				dealerUnitID = e.getInt("dealerUnitID");
				damage = e.getDouble("damage");

				for (Map.Entry<Integer,Integer> m: playerlists.entrySet()){
					if(m.getKey()==receiverUnitID){
						championID_receiver = m.getValue();
					}
					if(m.getKey()==dealerUnitID){
						championID_dealer = m.getValue();
					}
				}

				if (championID_receiver != -1 && championID_dealer != -1) {
					 k2.set(game_id + "," + length + "," + damage_time + "," + championID_receiver + ","
							+ championID_dealer + ",");

					
					v2.set(Double.toString(damage));
					/* write the first mapreduce output */

					con.write(k2, v2);
				}

			}
		}

	
	
	
	
}
